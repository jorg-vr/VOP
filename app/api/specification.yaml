swagger: '2.0'
info:
  version: 2.1.1
  title: Solvas Fleet API - Milestone 2
  description: >
    The API definitions for the first Milestone.


    Some attributes in the models are server-generated attributes. To keep the
    API shorter, we don't use different

    models for the different operations. Attributes are divided in two main
    categories:


    1. Required attributes. These must be present at all times.

    2. Non-required attributes. There are three categories:
        1. Server-generated attributes. These attributes are marked as "read-only". These are read-only from the server
           to the client. If the client sends them to the server, they must be ignored.
        2. Client-generated attributes. These are read-only from the client to the server. This means that the
           client can send them to the server, but the server will never send them to the client.
        3. Normal data-attributes. These are standard attributes representing optional data.

    Note on the sorting parameters. Support for sorting is currently optional:
    this means that the sort parameters may

    be ignored by the server. If the server does decide to support sorting, it
    should adhere to the API.
securityDefinitions:
  token:
    description: >
      Here in the swagger document, the API is described using the type
      `OAuth2`. Conceptually, this is what we use.

      However, we don't formally follow the OAuth2 specification, so it isn't
      OAuth2. The reason we use it in the spec anyway

      is that it allows us to easily define scopes (or permissions) for every
      endpoint. The alternative would using

      vendor extensions. This is also possible and works well, but requires
      custom support. (Things such as the Swagger

      Editor ignore custom extensions).


      The authentication flow is as follows:

        1. The client sends an `Auth` object to the `/auth/login` endpoint.
        2. The server validates the credentials and sends back two `JWT` tokens. The contents of the JWT token are defined
           as object in this API spec, however, a JWT token should be sent according to the JWT-specification. See below.
           One of the tokens is the access token, the other is the refresh token.
        3. The client sends this token along with every request it sends to the server.
        4. The token has an expiration date. If the expiration date is near, the client should refresh the token.
        5. To refresh the token, the client sends the refresh it has to the `/auth/refresh` endpoint.
        6. The server looks up the user and validates it. If the user is still valid, the server returns a new access token.
        7. If the refresh tokens expires, the user should log in again to obtain a new refresh token.

      The token must be sent in the header, using `Authorization: Bearer
      {token}`. Note that not all swagger-related tools

      understand the notation below.


      The token's format is defined in this spec as an object. This does not
      define the full token; it only defines the payload

      of the token. The payload contains the data. More information can be found
      at https://jwt.io/.


      Note: if there is no security defined on an endpoint, it means the
      endpoint does not require authorisation. The scopes specified do not make
      sense everywhere yet. If you notice some inconsistencies, please notify
      your API-responsible.F
    type: oauth2
    tokenUrl: /auth/refresh
    flow: password
paths:
  /companies:
    get:
      produces:
        - application/json
      summary: |
        Get all companies.
      description: >
        Get a list of `Company` objects, eventually filtered by the query

        parameters. When combining parameters, the conditions are joined by

        AND. This means the resulting objects must satisfy all filters. All the
        string filter operations are case insensitive.
      parameters:
        - in: query
          name: nameContains
          type: string
          description: Filter objects whose name attribute contains nameContains.
        - in: query
          name: country
          type: string
          description: Filter by country.
        - in: query
          name: city
          type: string
          description: Filter by city.
        - in: query
          name: postalCode
          type: string
          description: Filter by postal code.
        - in: query
          name: type
          type: string
          description: Filter by company type
        - in: query
          name: page
          type: integer
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Company'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /companies&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /companies&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /companies&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /companies&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add new company.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will be filled in by the server, using default values.
      parameters:
        - in: body
          name: Company
          required: true
          schema:
            $ref: '#/definitions/Company'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Company'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
  '/companies/{id}':
    parameters:
      - in: path
        name: id
        description: ID of Company
        required: true
        type: integer
        format: int64
    get:
      produces:
        - application/json
      summary: Get one company.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Company'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update a company.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will not be updated.
      parameters:
        - in: body
          name: Company
          required: true
          schema:
            $ref: '#/definitions/Company'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Company'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
    delete:
      summary: Archive a company.
      responses:
        '204':
          description: Company archived successfully.
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
  '/companies/{id}/commission':
    parameters:
      - in: path
        name: id
        description: ID of Company
        required: true
        type: integer
        format: int64
    get:
      produces:
        - application/json
      summary: Get the default Commission of the company.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Commission'
        '401':
          $ref: '#/responses/Unauthorised'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update default Commission of the company.
      description: >
        Attributes described as 'server-generated' will be ignored by the
        server. Non-required attributes that are not present will not be
        updated.
      parameters:
        - in: body
          name: Commission
          description: Commission to update
          required: true
          schema:
            $ref: '#/definitions/Commission'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Contract'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
    delete:
      summary: Reset the default Commission of the company.
      responses:
        '204':
          description: Commission
        '401':
          $ref: '#/responses/Unauthorised'
  '/companies/{id}/contracts':
    parameters:
      - in: path
        name: id
        type: integer
        format: int64
        description: ID of company
        required: true
    get:
      produces:
        - application/json
      summary: Get all contracts for a company.
      description: |
        Get a list of all contracts of the `company` with the given ID.
      parameters:
        - in: query
          name: insuranceCompany
          type: integer
          description: Filter by insurance company.
        - in: query
          name: vehicle
          type: integer
          description: Filter by vehicle.
        - in: query
          name: type
          type: string
          description: Filter by type of contract.
        - in: query
          name: page
          type: integer
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Contract'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /contracts&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /contracts&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /contracts&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /contracts&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
  '/companies/{company_id}/fleets/{fleet_id}/vehicles/{vehicle_id}/contracts':
    parameters:
      - in: path
        name: company_id
        type: integer
        format: int64
        description: ID of company
        required: true
      - in: path
        name: fleet_id
        type: integer
        format: int64
        description: ID of fleet
        required: true
      - in: path
        name: vehicle_id
        type: integer
        format: int64
        description: ID of vehicle
        required: true
    get:
      produces:
        - application/json
      summary: Get all contracts for a vehicle.
      description: |
        Get a list of all contracts of the `Vehicle` with the given ID.
      parameters:
        - in: query
          name: insuranceCompany
          type: integer
          description: Filter by insurance company.
        - in: query
          name: type
          type: string
          description: Filter by type of contract.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Contract'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /contracts&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /contracts&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /contracts&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /contracts&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
  '/fleets/{id}/invoices':
    parameters:
      - in: path
        name: id
        description: ID of the fleet
        required: true
        type: integer
        format: int64
    get:
      parameters:
        - in: query
          type: boolean
          name: payed
          description: >-
            Show only invoices that have been payed or not. If not present, all
            invoices will be shown.
        - in: query
          type: string
          name: type
          description: >-
            Show only invoices that match the given type. If not present, all
            invoices will be shown.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      produces:
        - application/json
      summary: Get all invoices.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Invoice'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /companies/id/invoices&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /companies/id/invoices&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /companies/id/invoices&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /companies/id/invoices&page=100
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
  '/fleets/{fleet_id}/invoices/{invoice_id}':
    parameters:
      - in: path
        name: fleet_id
        description: ID of Company
        required: true
        type: integer
        format: int64
      - in: path
        name: invoice_id
        description: ID of the invoice
        required: true
        type: integer
        format: int64
    get:
      produces:
        - application/json
      summary: Get one invoice.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Invoice'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
  '/fleets/{fleet_id}/invoices/{invoice_id}/{extention}':
    parameters:
      - in: path
        name: fleet_id
        description: ID of the fleet
        required: true
        type: integer
        format: int64
      - in: path
        name: invoice_id
        description: ID of the invoice
        required: true
        type: integer
        format: int64
      - in: path
        name: extention
        description: >-
          Format of the invoice. This should be in the extension format, e.g.
          `pdf` or `xml`.
        required: true
        type: string
    get:
      produces:
        - application/json
      summary: Get one invoice in a specified format.
      description: >
        Returns an invoice in the requested format. The response will be a file
        of the requested type, if

        the server supports that type. The API only mandates support for `.pdf`
        files, so clients should make

        sure they can handle errors if they request another format.
      responses:
        '200':
          description: OK
          schema:
            description: A file with the requested extention
            type: file
            example: invoice.pdf
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '415':
          description: >-
            Invalid or unknown format. The server does not support the requested
            format.
  '/fleets/{fleet_id}/invoices/current':
    parameters:
      - in: path
        name: fleet_id
        description: ID of the fleet
        required: true
        type: integer
        format: int64
    get:
      produces:
        - application/json
      summary: Get the current invoice.
      description: >
        Display the current invoice for a fleet. This is the invoice as it would
        be at the moment of generation. As

        such, it is possible that this invoice does not have an ID.
      parameters:
        - in: query
          name: type
          type: string
          description: >-
            indicates the type of the contract you want to see. The type has to
            be "billing" or "payment"
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Invoice'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
  /vehicles:
    get:
      summary: Get all vehicles.
      description: >
        Get a list of `Vehicle` objects, eventually filtered by the query

        parameters. When combining parameters, the conditions are joined by

        AND. This means the resulting objects must satisfy all filters. All the
        string filter operations are case insensitive.
      produces:
        - application/json
      parameters:
        - in: query
          name: licensePlate
          type: string
          description: Filter by license plate.
        - in: query
          name: vin
          type: string
          description: Filter by chassis number.
        - in: query
          name: leasingCompany
          type: integer
          description: Filter by leasingCompany.
        - in: query
          name: year
          type: integer
          description: Filter by build year.
        - in: query
          name: fleet
          type: integer
          description: Filter by fleet.
        - in: query
          name: type
          type: string
          description: Filter by vehicle type.
        - in: query
          name: page
          type: integer
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Vehicle'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /vehicles&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /vehicles&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /vehicles&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /vehicles&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add a new vehicle.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will be filled in by the server, using default values.
      parameters:
        - in: body
          name: Vehicle
          description: Vehicle item to add
          schema:
            $ref: '#/definitions/Vehicle'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Vehicle'
        '400':
          $ref: '#/responses/Malformed'
        '409':
          $ref: '#/responses/Conflict'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
  '/vehicles/{id}':
    parameters:
      - name: id
        in: path
        description: ID of Vehicle
        required: true
        type: integer
    get:
      produces:
        - application/json
      summary: Find one vehicle.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Vehicle'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update a vehicle.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will not be updated.
      parameters:
        - in: body
          name: Vehicle
          description: Vehicle to add
          required: true
          schema:
            $ref: '#/definitions/Vehicle'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Vehicle'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
    delete:
      summary: Archive a vehicle.
      responses:
        '204':
          description: Vehicle archived successfully
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
  '/vehicles/{id}/commission':
    parameters:
      - in: path
        name: id
        description: ID of Vehicle
        required: true
        type: integer
        format: int64
    get:
      produces:
        - application/json
      summary: Get the Commission of the vehicle.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Commission'
        '401':
          $ref: '#/responses/Unauthorised'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update Commission of the vehicle.
      description: >
        Attributes described as 'server-generated' will be ignored by the
        server. Non-required attributes that are not present will not be
        updated.
      parameters:
        - in: body
          name: Commission
          description: Commission to update
          required: true
          schema:
            $ref: '#/definitions/Commission'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Contract'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
    delete:
      summary: Reset the Commission of the vehicle to the default value.
      responses:
        '204':
          description: Commission
        '401':
          $ref: '#/responses/Unauthorised'
  /vehicles/types:
    get:
      produces:
        - application/json
      summary: Get all vehicle types.
      description: >
        Get a list of all the posible vehicle types supported by the system. The
        values must be:

          - `PersonalVehicle`
          - `SemiHeavyTruck`
          - `Truck`
          - `Truck+12`
          - `Van`

        Vehicles in the `SemiHeavyTruck` category are busses, cabs, tranport and
        trailers.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
            properties:
              data:
                type: array
                example:
                  - PersonalVehicle
                  - SemiHeavyTruck
                  - Truck
                  - Truck+12
                  - Van
                items:
                  type: string
              total:
                description: Total number of items.
                example: 5
                type: integer
        '401':
          $ref: '#/responses/Unauthorised'
  '/vehicles/types/{vehicleType}/commission':
    parameters:
      - name: vehicleType
        in: path
        description: ID of a vehicle type.
        required: true
        type: integer
    get:
      produces:
        - application/json
      summary: Get the Commission of the vehicle type.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Commission'
        '401':
          $ref: '#/responses/Unauthorised'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update the Commission of the vehicle type.
      description: >
        Attributes described as 'server-generated' will be ignored by the
        server. Non-required attributes that are not present will not be
        updated.
      parameters:
        - in: body
          name: Commission
          description: Commission to update
          required: true
          schema:
            $ref: '#/definitions/Commission'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Contract'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
    delete:
      summary: Reset the Commission to the default value.
      responses:
        '204':
          description: Commission
        '401':
          $ref: '#/responses/Unauthorised'
  '/vehicles/types/{typeName}/taxes/{contractType}':
    parameters:
      - name: typeName
        in: path
        description: Name of Vehicle type. See GET /vehicles/types for all possibilities
        required: true
        type: string
      - name: contractType
        in: path
        description: Name of Contract type. See GET /contracts/types for all possibilities.
        required: true
        type: string
    get:
      produces:
        - application/json
      summary: Get the tax percentage.
      description: Get the tax percentage for a given `Vehicle` type and `Contract` type.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - tax
            properties:
              tax:
                type: number
                format: double
                description: Tax in percentage
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      summary: Set the tax percentag.
      description: >-
        Sets the tax percentage for a given combination of `Vehicle` type and
        `Contract` type.
      parameters:
        - in: query
          name: tax
          description: tax percentage
          required: true
          type: number
          format: double
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              tax:
                type: number
                format: double
                description: Tax in percentage
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
  /contracts:
    get:
      produces:
        - application/json
      summary: Get all contracts.
      description: |
        Get a list of `Contract` objects, eventually filtered by the query
        parameters. When combining parameters, the conditions are joined by
        AND. This means the resulting objects must satisfy all filters.
      parameters:
        - in: query
          name: insuranceCompany
          type: integer
          description: Filter by insurance company.
        - in: query
          name: vehicle
          type: integer
          description: Filter by vehicle.
        - in: query
          name: type
          type: string
          description: Filter by type of contract.
        - in: query
          name: page
          type: integer
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Contract'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /contracts&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /contracts&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /contracts&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /contracts&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add a new contract.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will be filled in by the server, using default values.
      parameters:
        - in: body
          name: Contract
          description: Contract item to add
          schema:
            $ref: '#/definitions/Contract'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Contract'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '409':
          $ref: '#/responses/Conflict'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
  '/contracts/{id}':
    parameters:
      - name: id
        in: path
        description: ID of Contract
        required: true
        type: integer
    get:
      produces:
        - application/json
      summary: Get one contract.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Contract'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update a contract.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will not be updated.
      parameters:
        - in: body
          name: Contract
          description: Contract to update
          required: true
          schema:
            $ref: '#/definitions/Contract'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Contract'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
    delete:
      summary: Archive a contract.
      responses:
        '204':
          description: Contract archived successfully
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
  /contracts/types:
    get:
      summary: Get all types of contracts.
      description: |
        Get a list of all contract types. The types are:

          - `CivilLiability`
          - `LegalAid`
          - `Omnium`
          - `DriverInsurance`
          - `TravelInsurance`
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
            properties:
              data:
                type: array
                example:
                  - CivilLiability
                  - LegalAid
                  - Omnium
                  - DriverInsurance
                  - TravelInsurance
                items:
                  type: string
              total:
                description: total number of items
                example: 5
                type: integer
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
  '/companies/{id}/fleets':
    parameters:
      - in: path
        name: id
        description: ID of Company
        required: true
        type: integer
        format: int64
    get:
      summary: Get all fleets of a company.
      description: >
        Get a list of `Fleet` objects, eventually filtered by the query

        parameters. When combining parameters, the conditions are joined by

        AND. This means the resulting objects must satisfy all filters. All the
        string filter operations are case insensitive.
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Fleet'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /fleet&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /fleet&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /fleet&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /fleet&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add a new fleet.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will be filled in by the server, using default values.
      parameters:
        - in: body
          name: Fleet
          description: Fleet item to add
          schema:
            $ref: '#/definitions/Fleet'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Fleet'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          description: The company was not found.
        '409':
          $ref: '#/responses/Conflict'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
  '/companies/{companyId}/fleets/{id}':
    parameters:
      - in: path
        name: companyId
        description: ID of Company
        required: true
        type: integer
        format: int64
      - in: path
        name: id
        description: ID of Fleet
        required: true
        type: integer
    get:
      produces:
        - application/json
      summary: Find one fleet.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Fleet'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update a fleet.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will not be updated.
      parameters:
        - in: body
          name: Fleet
          description: The fleet to update
          required: true
          schema:
            $ref: '#/definitions/Fleet'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Fleet'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
    delete:
      summary: Archive a fleet.
      responses:
        '204':
          description: Fleet archived successfully
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
  '/companies/{companyId}/fleets/{fleetId}/vehicles':
    parameters:
      - in: path
        name: companyId
        description: ID of Company
        required: true
        type: integer
        format: int64
      - in: path
        name: fleetId
        description: ID of Fleet
        required: true
        type: integer
    get:
      summary: Get all vehicles.
      description: >
        Get a list of `Vehicle` objects for a fleet, eventually filtered by the
        query

        parameters. When combining parameters, the conditions are joined by

        AND. This means the resulting objects must satisfy all filters. All the
        string filter operations are case insensitive.
      produces:
        - application/json
      parameters:
        - in: query
          name: licensePlate
          type: string
          description: Filter by license plate.
        - in: query
          name: vin
          type: string
          description: Filter by chassis number.
        - in: query
          name: leasingCompany
          type: integer
          description: Filter by leasing company.
        - in: query
          name: year
          type: integer
          description: Filter by build year.
        - in: query
          name: type
          type: string
          description: Filter by vehicle type.
        - in: query
          name: page
          type: integer
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Vehicle'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /vehicles&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /vehicles&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /vehicles&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /vehicles&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
  '/companies/{companyId}/fleets/{fleetId}/vehicles/{id}':
    parameters:
      - in: path
        name: companyId
        description: ID of Company
        required: true
        type: integer
        format: int64
      - in: path
        name: fleetId
        description: ID of Fleet
        required: true
        type: integer
      - name: id
        in: path
        description: ID of Vehicle
        required: true
        type: integer
    get:
      produces:
        - application/json
      summary: Get one vehicle.
      description: >
        Get a `Vehicle`, specified by its ID. The vehicle must have a `Fleet`,
        which in turn must have a `Company`.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Vehicle'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
  /auth/roles:
    get:
      produces:
        - application/json
      summary: Get all roles.
      description: |
        Get a list of `Role` objects, eventually filtered by the query
        parameters. When combining parameters, the conditions are joined by
        AND. This means the resulting objects must satisfy all filters.
        All the string filter operations are case insensitive.
      parameters:
        - in: query
          name: name
          description: The name of the role.
          type: string
        - in: query
          name: page
          type: integer
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Role'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /roles&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /roles&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /roles&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /roles&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add a new role.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will be filled in by the server, using default values.
      parameters:
        - in: body
          name: data
          description: The data to save
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Role'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
  '/auth/roles/{id}':
    parameters:
      - in: path
        name: id
        description: ID of Role
        required: true
        type: integer
    get:
      produces:
        - application/json
      summary: Get one role.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Role'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update a role.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will not be updated.
      parameters:
        - in: body
          name: data
          description: Role to be updated
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Role'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
    delete:
      summary: Archive a role.
      responses:
        '204':
          description: Role archived successfully
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
  '/auth/roles/{id}/permissions':
    parameters:
      - in: path
        name: id
        type: integer
        required: true
        description: The ID of the role.
    get:
      produces:
        - application/json
      summary: Get a list of permissions for a Role.
      description: >
        Get all permissions that a certain role has, eventually filtered by the
        query parameters.

        When combining parameters, the conditions are joind by AND. This means
        the resulting objects must

        satisfy all filters. All string filters are case-insensitive.
      parameters:
        - in: query
          name: resource
          type: string
          description: Filter by resource.
        - in: query
          name: action
          type: string
          description: Filter by action.
        - in: query
          type: integer
          name: page
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Permission'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /users&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /users&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /users&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /users&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
    put:
      summary: Set the Permissions of a Role.
      description: >
        Set the Permissions for a Role. You must pass the list of permissions
        you want a role to have. After this operation

        the permissions should match exactly with the list you sent: permissions
        that were not in your list will be removed,

        and permissions that are in your list will be added (or left the same if
        the role already has it).
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: data
          description: List of permissions
          schema:
            type: array
            items:
              type: integer
              description: The ID's of the permissions.
      responses:
        '204':
          description: Permissions were updated succesfully.
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          description: The role with the given ID does not exist.
        '409':
          description: >-
            Could not update one of the permissions (e.g. because they don't
            exist)
        '415':
          $ref: '#/responses/WrongType'
  /auth/permissions:
    get:
      produces:
        - application/json
      summary: Get a list of permissions.
      description: >
        Get a list of `Permission` objects, eventually filtered by the query
        parameters.

        When combining parameters, the conditions are joind by AND. This means
        the resulting objects must

        satisfy all filters. All string filters are case-insensitive.
      parameters:
        - in: query
          name: resource
          type: string
          description: Filter by resource.
        - in: query
          name: action
          type: string
          description: Filter by action.
        - in: query
          type: integer
          name: page
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Permission'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /users&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /users&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /users&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /users&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
  /auth/login:
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Get an access token.
      description: >
        Request a security token to access the application. The response is a
        JSON Web Token (JWT). The response in this

        specification only specifies what fields must be included in the payload
        of the JWT. However, the response MUST

        be a full JWT.
      parameters:
        - in: body
          name: auth
          description: The login data of the user
          required: true
          schema:
            $ref: '#/definitions/Auth'
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - access
              - refresh
            properties:
              access:
                $ref: '#/definitions/AccessToken'
              refresh:
                $ref: '#/definitions/RefreshToken'
        '401':
          $ref: '#/responses/Unauthorised'
  /auth/refresh:
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Get a new access token.
      description: >
        Request a access token to access the application, based on an existing
        token.  The response is a JSON Web Token (JWT).

        The response in this specification only specifies what fields must be
        included in the payload of the JWT. However, the

        response MUST be a full JWT.
      parameters:
        - in: body
          name: token
          required: true
          description: The refresh token.
          schema:
            $ref: '#/definitions/RefreshToken'
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - access
            properties:
              access:
                $ref: '#/definitions/AccessToken'
        '401':
          $ref: '#/responses/Unauthorised'
  /users:
    get:
      produces:
        - application/json
      summary: Get all users.
      description: >
        Get a list of `User` objects, eventually filtered by the query

        parameters. When combining parameters, the conditions are joined by

        AND. This means the resulting objects must satisfy all filters. All the
        string filter operations are case insensitive.
      parameters:
        - in: query
          name: email
          type: string
          format: email
          description: Filter by email.
        - in: query
          name: firstName
          type: string
          description: Filter by first name.
        - in: query
          name: lastName
          type: string
          description: Filter by last name.
        - in: query
          type: integer
          name: page
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/User'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /users&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /users&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /users&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /users&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add a new user.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will be filled in by the server, using default values.
      parameters:
        - in: body
          name: User
          description: User to add
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '409':
          $ref: '#/responses/Conflict'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
  '/users/{id}':
    parameters:
      - name: id
        in: path
        description: ID of User
        required: true
        type: integer
    get:
      produces:
        - application/json
      summary: Get one user.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update a user.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will not be updated.
      parameters:
        - in: body
          name: User
          description: User to add
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
    delete:
      summary: Archive a user.
      responses:
        '204':
          description: Role archived successfully
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
  /users/me:
    get:
      produces:
        - application/json
      summary: Get current user.
      description: >
        Get information of the current user, based on the Authorization header.
        This path does not require a 

        Function header.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update current user.
      description: >
        Read-only attributes will be ignored by the server. Non-required
        attributes that are

        not present will not be updated. This path does require a Function
        header!
      parameters:
        - in: body
          name: User
          description: User to add
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
        '415':
          $ref: '#/responses/WrongType'
        '422':
          $ref: '#/responses/WrongContent'
  '/users/{id}/functions':
    parameters:
      - name: id
        in: path
        description: ID of User
        required: true
        type: integer
    get:
      produces:
        - application/json
      summary: Get all functions for a user.
      description: >
        Get a list of `Function` objects for a `User`, eventually filtered by
        the query

        parameters. When combining parameters, the conditions are joined by

        AND. This means the resulting objects must satisfy all filters.

        All the string filter operations are case insensitive.
      parameters:
        - in: query
          name: company
          description: Filter by company
          type: integer
        - in: query
          name: role
          description: Filter by role
          type: integer
        - in: query
          name: page
          type: integer
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Function'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /roles&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /roles&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /roles&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /roles&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
    post:
      summary: Add a new function.
      description: |
        Add a new function to a user.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: Function
          description: Function to add
          schema:
            $ref: '#/definitions/Function'
      responses:
        '204':
          description: Function was added succesfully.
          schema:
            $ref: '#/definitions/Function'
        '400':
          $ref: '#/responses/Malformed'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          description: The user with the given ID does not exist.
        '409':
          description: >-
            The Function already exists, the triple (user, role , company)
            should be unique
        '415':
          $ref: '#/responses/WrongType'
  '/users/{userId}/functions/{id}':
    parameters:
      - name: userId
        in: path
        description: ID of User
        required: true
        type: integer
      - name: id
        in: path
        description: ID of Function
        required: true
        type: integer
    delete:
      summary: Archive a function.
      responses:
        '204':
          description: Function archived successfully
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
  /users/me/functions:
    get:
      produces:
        - application/json
      summary: Get all functions for the current user.
      description: >
        Get a list of `Function` objects for a `User`, eventually filtered by
        the query

        parameters. When combining parameters, the conditions are joined by

        AND. This means the resulting objects must satisfy all filters.

        All the string filter operations are case insensitive. This path does
        not require a Function header.
      parameters:
        - in: query
          name: company
          description: Filter by company
          type: integer
        - in: query
          name: role
          description: Filter by role
          type: integer
        - in: query
          name: page
          type: integer
          description: The page to query.
          default: 0
        - in: query
          name: limit
          type: integer
          description: The number of elements in a page.
        - in: query
          name: sort
          type: string
          description: >
            Sort parameter. Support for this parameter is optional. If
            supported, any field in the json reprensentation

            may be used to sort, as follows: ?sort=field,order. For example:
            `?sort=name,asc`.
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - data
              - total
              - offset
              - limit
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Function'
              total:
                description: Total number of items.
                example: 50
                type: integer
              offset:
                description: |
                  The number of items before this page (exclusive). This means
                  that when offset = 20, this page will contains items 20 to
                  20 + limit. For limit = 10, it will be 20 - 29 (including 29).
                example: 20
                type: integer
              limit:
                description: The maximum number of items on a page.
                example: 10
                type: integer
              previous:
                description: 'Link to the previous page, if applicable.'
                example: /roles&page=1
                type: string
              next:
                description: 'Link to the next page, if applicable.'
                type: string
                example: /roles&page=20
              first:
                description: 'Link to the first page, if applicable.'
                type: string
                example: /roles&page=0
              last:
                description: 'Link to the last page, if applicable.'
                type: string
                example: /roles&page=100
        '400':
          $ref: '#/responses/WrongQuery'
        '401':
          $ref: '#/responses/Unauthorised'
  '/users/me/functions/{id}':
    parameters:
      - name: id
        in: path
        description: ID of Function
        required: true
        type: integer
    get:
      produces:
        - application/json
      summary: Get one function.
      description: |
        This path does not require a Function header.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Function'
        '401':
          $ref: '#/responses/Unauthorised'
        '404':
          $ref: '#/responses/NotFound'
responses:
  Malformed:
    description: The JSON is malformed. This is a syntax error.
  WrongQuery:
    description: A query parameter has a wrong type.
  WrongContent:
    description: >
      The JSON is has correct syntax, but an attribute was missing or one of the

      attributes has incorrect content. All attributes with errors or missing
      ones

      should be reported back in the error object.
    schema:
      $ref: '#/definitions/Error'
  Conflict:
    description: >
      There was a conflict while updating or saving the model. This is not the

      same as a `422` code. This response indicates the request has a correct

      syntax and the content is correctly formed, but it still could not be
      saved.

      An example might be trying to add a vehicle with a chassis number that
      already

      exists in the database. The error response contains all fields (or the
      field) that

      triggered the error. Continuing the vehicle example, it would contain the
      field

      `vin`.

      Another example might be trying to delete a company that is still used.
    schema:
      $ref: '#/definitions/Error'
  WrongType:
    description: |
      The `Content-Type` header is not set to `application/json`.
  NotFound:
    description: |
      The resource with the given ID was not found.
  Unauthorised:
    description: |
      The token was not valid.
definitions:
  Company:
    type: object
    required:
      - name
      - type
      - vatNumber
      - phoneNumber
      - address
    properties:
      id:
        type: integer
        readOnly: true
      name:
        description: The name of the company.
        type: string
      type:
        type: string
        description: >-
          This is a required attribute. Possible values are `Customer`,
          `LeasingCompany` or `InsuranceCompany`.
        enum:
          - Customer
          - LeasingCompany
          - InsuranceCompany
      vatNumber:
        type: string
        example: BE123456789B01
      phoneNumber:
        type: string
        format: phone
        example: +32 56 33 66 00
      address:
        $ref: '#/definitions/Address'
      createdAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      lastUpdated:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        readOnly: true
        type: string
  Address:
    type: object
    required:
      - country
      - city
      - street
      - houseNumber
      - postalCode
    properties:
      country:
        description: This field should contain the 2-letter ISO 3166 code of the country
        type: string
        example: BE
      city:
        type: string
        example: Gent
      street:
        type: string
        example: Jozef Plateaustraat
      houseNumber:
        type: string
        example: 52B
      postalCode:
        type: string
        example: '9000'
  Vehicle:
    type: object
    required:
      - vin
      - brand
      - model
      - type
      - mileage
      - year
    properties:
      id:
        readOnly: true
        type: integer
        example: 25
      licensePlate:
        description: A null value indicates that the vehicle does not have a license plate.
        type: string
        example: 1-ABC-456
      vin:
        type: string
        example: LJCPCBLCX11000237
      brand:
        type: string
        example: Volkswagen
      model:
        type: string
        example: Golf 7
      type:
        description: >
          The type of the vehicle. This value must be one of the values defined
          at the `/vehicles/types` endpoint.
        type: string
        example: PersonalVehicle
      mileage:
        type: integer
        example: 132000
      year:
        type: string
        format: date-time
        example: 2016-01-01T00:00:00.001Z
        description: The build year for this vehicle.
      value:
        type: integer
        format: int64
        example: 155363
        description: The value described in cents.
      leasingCompany:
        type: integer
        description: >-
          A null value indicates that the vehicle does not belong to a leasing
          company.
      fleet:
        type: integer
        description: A null value indicates that the vehicle does not belong to a fleet.
      createdAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        readOnly: true
        type: string
        format: url
        example: /vehicles/1
  Commission:
    type: object
    required:
      - value
    properties:
      value:
        description: A percentage value representing the commission.
        type: number
        format: double
      createdAt:
        description: This is a server-generated value.
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        description: This is a server-generated value.
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        description: This is a server-generated value.
        type: string
  Role:
    description: >
      A `Role` represents a collection of permissions that are granted together.
      A role is not attached to an user directly;

      it is a component of a `Function` instead. A `Function` grants the
      permissions of a `Role` to a `User`, optionally

      for a `Company`.
    type: object
    required:
      - name
    properties:
      id:
        readOnly: true
        type: integer
      name:
        type: string
        description: The name of the role.
      permissions:
        type: array
        items:
          type: string
        description: A list of permissions this role has. This is a server-generated value.
        example:
          - 'read:vehicles'
          - 'write:company'
      createdAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        readOnly: true
        type: string
  Permission:
    type: object
    required:
      - resource
      - action
    properties:
      id:
        readOnly: true
        description: This is a server-generated value.
        type: integer
      resource:
        type: string
        description: >
          Which resource can be edited by this permission. This MUST be one of
          the objects defined in this API.
      action:
        type: string
        description: >
          Describes what can be done with the resource. Possible values include
          `READ`, `READ_ALL`, `EDIT`, ...

          A common set of action will be defined by the API. They will mostly
          map to the available endpoints, e.g. `READ_ALL`

          would map to the endpoint that returns the list of items, while `READ`
          maps to the endpoint for a single item.

          Note that some actions may automatically give access to others, e.g.
          `READ_ALL` logically also enables `READ`.
  Function:
    description: >
      A `Function` represents the `Role` an `User` has for a certain company.
      The permissions of the `Role` must only

      be granted for the given company (if the funcion has a company). If the
      function does not have a company, it is

      valid for all companies (or a company is not relevant).
    type: object
    required:
      - company
      - user
      - role
    properties:
      id:
        type: integer
        readOnly: true
      company:
        description: >
          If this value is a positive number, it indicates this role is
          restricted to one company. This means

          every permission of this role is only applicable to the specified
          company. If the value is -1, it means

          the role is applicable to all companies. For example, a function with
          a role with the permission 'read:vehicles'

          does not need a company (as 'read:vehicles' implies reading all
          vehicles). Another example is a role with the

          permission 'read:fleet'. This permission requires a company.
        type: integer
      companyName:
        readOnly: true
        type: string
        description: Name of the company
      role:
        type: integer
        description: The id of the role.
      roleName:
        readOnly: true
        type: string
        description: Name of the role
      user:
        type: integer
        description: The id of the user.
      createdAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        readOnly: true
        type: string
  User:
    type: object
    required:
      - firstName
      - lastName
      - email
      - password
    properties:
      id:
        readOnly: true
        type: integer
        example: 12345
      firstName:
        type: string
        example: Jan
      lastName:
        type: string
        example: Janssens
      email:
        type: string
        format: email
        example: user@ugent.be
      functions:
        type: string
        readOnly: true
        description: The URL to the Functions of this user.
        example: /users/5/functions
      password:
        type: string
        description: >-
          This attribute is client-generated, and will never be returned by the
          server.
        format: password
        example: '******'
      createdAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        readOnly: true
        type: string
        example: /users/
  Fleet:
    type: object
    required:
      - company
    properties:
      id:
        readOnly: true
        type: integer
      company:
        type: integer
      name:
        type: string
      paymentPeriod:
        description: This is the time between payments in advance.
        example: '1'
        type: integer
      facturationPeriod:
        description: This is the time between corrections on the payment.
        example: '3'
        type: integer
      address:
        $ref: '#/definitions/Address'
      createdAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        readOnly: true
        type: string
        example: /company/5/fleet/7
  Invoice:
    type: object
    required:
      - payer
      - paid
      - totalAmount
      - type
      - startDate
      - endDate
    properties:
      id:
        readOnly: true
        type: integer
        format: int64
      payer:
        description: The ID of the company this invoice belongs to
        type: integer
        format: int64
      beneficiary:
        description: The ID ofthe company that the amount has to be paid to
        type: integer
        format: int64
      paid:
        description: Shows if the invoice is paid or not.
        type: boolean
      totalAmount:
        description: >-
          The total amount of money in cents that has to be paid in this
          invoice. (premium + commission)
        type: integer
        format: int64
      totalTax:
        description: The total amount of tax in cents that has to be paid in this invoice.
        type: integer
        format: int64
      type:
        description: >-
          The type of the invoice. The only possible values are `billing` or
          `payment`
        type: string
        enum:
          - billing
          - payment
      startDate:
        description: The begin date of the invoice.
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      endDate:
        description: The end date of the invoice.
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      createdAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        readOnly: true
        type: string
        example: /fleet/15/invoice/20
  Contract:
    type: object
    required:
      - customer
      - insuranceCompany
      - startDate
      - endDate
    properties:
      id:
        readOnly: true
        type: integer
        format: int64
      customer:
        description: The customer.
        type: integer
        format: int64
      insuranceCompany:
        description: The insurance company.
        type: integer
        format: int64
      startDate:
        description: The begin date of the contract.
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      endDate:
        description: The end date of the contract.
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      createdAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        readOnly: true
        type: string
        example: /contracts/
  VehicleInsurance:
    type: object
    required:
      - vehicle
      - surety
      - contract
      - franchise
      - insuredValue
    properties:
      id:
        description: This is a server-generated value.
        type: integer
        format: int64
      vehicle:
        description: Insured vehicle.
        type: integer
        format: int64
      surety:
        description: The surety.
        type: integer
        format: int64
      contract:
        description: Contract that this insurance belongs to.
        type: integer
        format: int64
      franchise:
        description: Damages paid for by the client in case of an accident.
        type: integer
        example: 1250
      insuredValue:
        description: Value that is insured in cents.
        type: integer
        example: 500
      cost:
        readOnly: true
        description: Cost of this insurance in cents.
        type: integer
        example: 500
      tax:
        readOnly: true
        description: Tax of this insurance in cents.
        type: integer
        example: 500
      createdAt:
        description: This is a server-generated value.
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        description: This is a server-generated value.
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        description: This is a server-generated value.
        type: string
        example: /contracts/10/insurances
  Surety:
    type: object
    required:
      - isFlat
      - premium
      - premiumPercentage
    properties:
      id:
        readOnly: true
        type: integer
        format: int64
      isFlat:
        description: true when it is a flat Surety
        type: boolean
        format: int64
      premium:
        description: >-
          Premium that has to paid in cents. When the Surety is not flat, this
          is the minimum premium.
        type: integer
        format: int64
      premiumPercentage:
        description: Has no use when the Surety is flat.
        type: number
        format: double
        example: 0.17
      suretyType:
        description: type of surety
        type: string
      createdAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        readOnly: true
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        readOnly: true
        type: string
        example: /contracts/
  Error:
    type: object
    properties:
      errors:
        type: array
        items:
          type: string
        description: >
          Contains a list of attributes that have an error. This can range from
          being required to

          having a conflict.
  Auth:
    type: object
    required:
      - email
      - password
    properties:
      email:
        description: The email address of the user
        type: string
      password:
        description: The password of the user
        type: string
  AccessToken:
    description: >
      This is the payload of the JWT Access Token. Most of these are standard
      claims. Additional claims may be defined by the

      implementations, on the condition that they 1) follow the JWT
      specification and 2) both the client and server

      continue to function without them.
    type: object
    required:
      - iat
      - exp
      - sub
    properties:
      iss:
        type: string
        description: Identifies the issuer of the token.
      iat:
        type: integer
        format: int64
        description: UTC Unix time when the token was issued.
      exp:
        type: integer
        format: int64
        description: UTC Unix time when the token will expire.
      sub:
        type: integer
        description: The ID of the user.
  RefreshToken:
    description: >
      This is the payload of the JWT Refresh Token. Most of these are standard
      claims. Additional claims may be defined by the

      implementations, on the condition that they 1) follow the JWT
      specification and 2) both the client and server

      continue to function without them.
    type: object
    required:
      - iat
      - exp
      - sub
    properties:
      iss:
        type: string
        description: Identifies the issuer of the token.
      iat:
        type: integer
        format: int64
        description: UTC Unix time when the token was issued.
      exp:
        type: integer
        format: int64
        description: UTC Unix time when the token will expire.
      sub:
        type: integer
        description: The ID of the user.
