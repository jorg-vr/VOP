swagger: '2.0'
info:
  version: 0.0.0
  title: Solvas Fleet API - Milestone 1
paths:
  /companies:
    get:
      summary: | 
        Get a list of Company objects.
      description: |
        Get a list of `Company` objects, eventually filtered by the query 
        parameters. When combining parameters, the conditions are joined by 
        AND. This means the resulting objects must satisfy all filters. All the string filter operations are case insensitive.
      parameters:
        - in: query
          name: name_contains
          type: string
          description: Filter objects whose name attribute contains name_contains.
        - in: query
          name: country
          type: string
          description: Filter by country
        - in: query
          name: city
          type: string
          description: Filter by city
        - in: query
          name: postal_code
          type: string
          description: Filter by postal code
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Company'
    post:
      summary: Add a new `Company` to the list of companies. 
      description: |
        Only the attributes that are marked as required should be filled in. The values of the other attributes are generated by the server. The server will ignore any data in the not required attributes. A successful response contains an updated `Company` object with valid values for the server generated attributes.
      parameters:
        - in: body
          name: Company
          required: true
          schema:
            $ref: '#/definitions/Company'
      responses:
        '200':
          description: Company was created successfully
          schema:
            $ref: '#/definitions/Company'
  '/companies/{id}':
    parameters:
        - in: path
          name: id
          description: ID of Company
          required: true
          type: integer
          format: int64
    get:
      summary: Find Company by ID
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Company'
        '404':
          description: Company not found
    put:
      summary: Update the `Company` with the given ID
      responses:
        '200':
          description: Company updated successfully
          schema:
            $ref: '#/definitions/Company'
    delete:
      summary: Archive the Company with the given ID
      responses:
        '200':
          description: Company archived successfully
  /vehicles:
    get:
      summary: Get a list of Vehicle objects.
      description: |
        Get a list of `Vehicle` objects, eventually filtered by the query 
        parameters. When combining parameters, the conditions are joined by 
        AND. This means the resulting objects must satisfy all filters. All the string filter operations are case insensitive.
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Vehicle'
        400:
          description: bad input parameter
    post:
      summary: Add a new `Vehicle` to the list of vehicles. 
      description: |
        Only the attributes that are marked as required should be filled in. The values of the other attributes are generated by the server. The server will ignore any data in the not required attributes. A successful response contains an updated `Vehicle` object with valid values for the server generated attributes.
      parameters:
      - in: body
        name: Vehicle
        description: Vehicle item to add.
        schema:
          $ref: '#/definitions/Vehicle'
      responses:
        200:
          description: OK
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /vehicles/{id}:
    parameters:
        - name: id
          in: path
          description: ID of Vehicle
          required: true
          type: integer
    get:
      summary: Find Company by ID 
      responses:
        200:
          description: OK
          schema: 
            $ref: '#/definitions/Vehicle'
        404:
          description: Resource not found.
    put:
        summary: Update the Vehicle with the given ID
        parameters:
        - in: body
          name: Vehicle
          description: Vehicle to add.
          required: true
          schema:
            $ref: '#/definitions/Vehicle'
        responses:
          200:
            description: Vehicle updated successfully
          400:
            description: Error in input.
          404:
            description: Resource not found.
    delete:
      summary: Archive the Vehicle with the given ID
      responses:
        200:
          description: OK
        404:
          description: Resource not found.
          
  /roles:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      summary: Add a new `Role` to the list of roles. 
      description: |
        Only the attributes that are marked as required should be filled in. The values of the other attributes are generated by the server. The server will ignore any data in the not required attributes. A successful response contains an updated `Role` object with valid values for the server generated attributes.
      # Filter parameters
      parameters:
        - in: query
          name: company
          description: Filter by company.
          type: integer
        - in: query
          name: user
          description: Filter by user.
          type: integer
        - in: query
          name: before
          description: Filter objects before this date.
          type: string
          format: date
        - in: query
          name: after
          description: Filter objects after this date.
          type: string
          format: date
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: OK
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              $ref: "#/definitions/Role"
        422:
          description: Wrong/invalid query parameters.
    post:
      summary: Save a new `Role` object.
      description: |
        Save a new `Role` object. When successful, the resulting object
        must be returned.
      parameters:
        - in: body
          name: data
          description: The data to save.
          required: true
          schema:
            $ref: "#/definitions/Role"
      responses:
        200:
          description: OK
          # Return the new object, to get the ID.
          schema:
            $ref: "#/definitions/Role"
        400:
          description: Malformed syntax.
        422:
          description: There was invalid data in the request.
          schema:
            $ref: "#/definitions/Error"
  /roles/{id}:
    parameters:
        - in: path
          name: id
          description: ID of Role
          required: true
          type: integer
    get:
      description: Find Role by ID
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Role"
        404:
          description: Non-existing object.
    delete:
      summary: Archive an existing `Role`object.
      description: |
        Archive a `Role` object, depending on the parameters. When this
        method is called on an object, the object cannot be used for any of the 
        other API methods.
      responses:
        200:
          description: OK
        404:
          description: There is no object with this ID.
        409:
          description: | 
            There was a conflict that prevented the object from being deleted.
            This could be that the object is still used by other objects for example.
          schema:
            $ref: "#/definitions/Error"
    put:
      description: Update a `Role` object.
      parameters:
        - in: body
          name: data
          description: Role to be updated.
          required: true
          schema:
            $ref: "#/definitions/Role"
      responses:
        200:
          description: OK
        404:
          description: There is no object with this ID.
        422:
          description: There was invalid data in the request.
          schema:
            $ref: "#/definitions/Error"
  /users:
    get:
      summary: Get a list of User objects.
      description: |
        Get a list of `User` objects, eventually filtered by the query 
        parameters. When combining parameters, the conditions are joined by 
        AND. This means the resulting objects must satisfy all filters. All the string filter operations are case insensitive.
      #produces:
      #- application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: bad input parameter
    post:
      summary: Add a new `User` to the list of users. 
      description: |
        Only the attributes that are marked as required should be filled in. The values of the other attributes are generated by the server. The server will ignore any data in the not required attributes. A successful response contains an updated `User` object with valid values for the server generated attributes.
      #consumes:
      #- application/json
      #produces:
      #- application/json
      parameters:
        - in: body
          name: User
          description: User to add
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

  /users/{id}:
    parameters:
     -  name: id
        in: path
        description: ID of User 
        required: true
        type: integer
        format: int64
    get:
      summary: Find User by ID
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        400:
          description: bad input parameter
        404:
          description: user not found
    put:
      description: Update the ´User` with the given ID
      #consumes:
      #- application/json
      #produces:
      #- application/json
      parameters:
        - in: body
          name: User
          description: User to add
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        202:
          description: user updated
        400:
          description: invalid input, object invalid
        404:
          description: user not found
        409:
          description: edit conflict    
    delete:
      description: Archive the User with the given ID
      responses:
        200:
          description: OK
        400:
          description: bad input parameter
        404:
          description: User not found
      
definitions:
  Company:
    type: object
    required:
      - name
      - vat_number
      - phone_number
      - address
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      vat_number:
        type: string
      phone_number:
        type: integer
        format: int32
      address:
        $ref: '#/definitions/Address'
      created_at:
        type: string
        format: date-time
      last_updated:
        type: string
        format: date-time
      url:
        type: string
  Address:
    type: object
    required:
      - country
      - city
      - street
      - house_number
      - postal_code
    properties:
      country:
        type: string
      city:
        type: string
      street:
        type: string
      house_number:
        type: integer
        format: int32
      postal_code:
        type: integer
        format: int32
  Vehicle:
    type: object
    required: [license_plate, chassis_number, brand, model, type, kilometer_count, year, leasing_company]
    properties:
      id:
        type: integer
        format: int32
        example: 25
      license_plate:
        type: string
        example: 1-ABC-456
      chassis_number:
        type: string
        example: LJCPCBLCX11000237
      brand:
        type: string
        example: Volkswagen
      model:
        type: string
        example: Golf 7
      type:
        type: string
        example: Persoonswagen
      kilometer_count:
        type: integer
        example: 132000
      year:
        type: string
        format: date
        example: 2012
      leasing_company:
        type: integer
      created_at:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updated_at:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        type: string
        format: url
        example: https://www.domain.me/vehicles/1
  Role:
    type: object
    required: [company, function, user]
    properties:
      id:
        type: integer
      company:
        type: integer
      function:
        type: string
      user:
        type: integer
      start_date:
        type: string
        format: date
      end_date:
        type: string
        format: date
      created_at:
        type: string
        format: date
      updated_at:
        type: string
        format: date
      url:
        type: string
  User:
    type: object
    required: [first_name, last_name, email, password]
    properties:
      id:
        type: integer
        format: int64
        example: 12345
      first_name:
        type: string
        example: "Jan"
      last_name:
        type: string
        example: "Janssens"
      email:
        type: string
        example: "user@ugent.be"
      password:
        type: string
        format: password
        example: "******"
      created_at:
        type: string
        format: date
        example: "2011-01-01"
      updated_at:
        type: string
        format: date
        example: "2011-01-02"
      url:
        type: string
        example: "/users/"
  Error:
    type: object
    properties:
      message:
        type: string
        description: |
          Free-form message from the server. It might contain instructions for the
          user how to solve the error or more details about the error.