swagger: '2.0'
info:
  version: 0.1.0
  title: Solvas Fleet API - Milestone 1
  description: |
    The API definitions for the first Milestone.
paths:
  /companies:
    get:
      produces:
        - application/json
      summary: | 
        Get a list of Company objects.
      description: |
        Get a list of `Company` objects, eventually filtered by the query 
        parameters. When combining parameters, the conditions are joined by 
        AND. This means the resulting objects must satisfy all filters. All the string filter operations are case insensitive.
      parameters:
        - in: query
          name: nameContains
          type: string
          description: Filter objects whose name attribute contains nameContains.
        - in: query
          name: country
          type: string
          description: Filter by country.
        - in: query
          name: city
          type: string
          description: Filter by city.
        - in: query
          name: postalCode
          type: string
          description: Filter by postal code.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Company'
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add a new Company to the list of companies.
      description: |
          Only the attributes that are marked as required should be filled in. The values of the other attributes are generated by
          the server. The server will ignore any data in the not required attributes. A successful response contains an updated
          `Company` object with valid values for the server generated attributes.
      parameters:
        - in: body
          name: Company
          required: true
          schema:
            $ref: '#/definitions/Company'
      responses:
        '200':
          description: Company was created successfully
          schema:
            $ref: '#/definitions/Company'
        '400':
          $ref: '#/responses/Malformed'
        '422':
          $ref: '#/responses/WrongContent'
        '415':
          $ref: '#/responses/WrongType'
  '/companies/{id}':
    parameters:
        - in: path
          name: id
          description: ID of Company
          required: true
          type: integer
          format: int64
    get:
      produces:
        - application/json
      summary: Find Company by ID.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Company'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update the `Company` with the given ID
      responses:
        '200':
          description: Company updated successfully
          schema:
            $ref: '#/definitions/Company'
        '400':
          $ref: '#/responses/Malformed'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          $ref: '#/responses/WrongContent'
        '415':
          $ref: '#/responses/WrongType'
    delete:
      summary: Archive the Company with the given ID
      responses:
        '204':
          description: Company archived successfully
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: | 
            The company could not be archived due to a conflict. An example might
            be that the company is still being used elsewhere, and the archiving could
            not be automatically cascaded.
  /vehicles:
    get:
      summary: Get a list of Vehicle objects
      description: |
        Get a list of `Vehicle` objects, eventually filtered by the query 
        parameters. When combining parameters, the conditions are joined by 
        AND. This means the resulting objects must satisfy all filters. All the string filter operations are case insensitive.
      produces:
      - application/json
      parameters:
        - in: query
          name: licensePlate
          type: string
          description: Filter by license plate.
        - in: query
          name: chassisNumber
          type: string
          description: Filter by chassis number.
        - in: query
          name: leasingCompany
          type: integer
          description: Filter by leasingCompany.
        - in: query
          name: year
          type: integer
          description: Filter by build year.
        - in: query
          name: company
          type: integer
          description: Filter by company.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Vehicle'
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add a new `Vehicle` to the list of vehicles 
      description: |
        Only the attributes that are marked as required should be filled in. The values of the other attributes are generated by the 
        server. The server will ignore any data in the not required attributes. A successful response contains an updated `Vehicle`
        object with valid values for the server generated attributes.
      parameters:
      - in: body
        name: Vehicle
        description: Vehicle item to add
        schema:
          $ref: '#/definitions/Vehicle'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/responses/Malformed'
        '409':
          description: |
            The vehicle already exists. This is not the same as `422`. This response
            indicates the request has a correct syntax and the content is correctly formed, 
            e.g. the licensePlate has the correct format, but it could not be added
            due to other constraints (such as uniqueness).
        '422':
          $ref: '#/responses/WrongContent'
        '415':
          $ref: '#/responses/WrongType'
  /vehicles/{id}:
    parameters:
        - name: id
          in: path
          description: ID of Vehicle
          required: true
          type: integer
    get:
      produces:
        - application/json
      summary: Find Company by ID 
      responses:
        '200':
          description: OK
          schema: 
            $ref: '#/definitions/Vehicle'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update the Vehicle with the given ID
      parameters:
      - in: body
        name: Vehicle
        description: Vehicle to add
        required: true
        schema:
          $ref: '#/definitions/Vehicle'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/responses/Malformed'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: |
            The vehicle already exists. This is not the same as `422`. This response
            indicates the request has a correct syntax and the content is correctly formed, 
            e.g. the licensePlate has the correct format, but it could not be added
            due to other constraints (such as uniqueness).
        '422':
          $ref: '#/responses/WrongContent'
        '415':
          $ref: '#/responses/WrongType'
    delete:
      summary: Archive the Vehicle with the given ID.
      responses:
        '204':
          description: Vehicle archived successfully
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: | 
            The vehicle could not be archived due to a conflict. An example might
            be that the Vehicle is still being used elsewhere, and the archiving could
            not be automatically cascaded.
          
  /roles:
    get:
      produces:
        - application/json
      summary: Get a list of Roles.
      description: |
        Get a list of `Role` objects, eventually filtered by the query 
        parameters. When combining parameters, the conditions are joined by 
        AND. This means the resulting objects must satisfy all filters.
        All the string filter operations are case insensitive.
      parameters:
        - in: query
          name: company
          description: Filter by company
          type: integer
        - in: query
          name: user
          description: Filter by user
          type: integer
        - in: query
          name: before
          description: Filter objects before this date
          type: string
          format: date-time
        - in: query
          name: after
          description: Filter objects after this date
          type: string
          format: date-time
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Role"
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add a new `Role` object.
      description: |
        Only the attributes that are marked as required should be filled in. The values of the other attributes are generated by the 
        server. The server will ignore any data in the not required attributes. A successful response contains an updated `Role` 
        object with valid values for the server generated attributes.
      parameters:
        - in: body
          name: data
          description: The data to save
          required: true
          schema:
            $ref: "#/definitions/Role"
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/responses/Malformed'
        '422':
          $ref: '#/responses/WrongContent'
        '415':
          $ref: '#/responses/WrongType'
  /roles/{id}:
    parameters:
        - in: path
          name: id
          description: ID of Role
          required: true
          type: integer
    get:
      produces:
        - application/json
      description: Find Role by ID
      responses:
        '200':
          description: OK
          schema: 
            $ref: '#/definitions/Role'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Update a `Role` object
      parameters:
        - in: body
          name: data
          description: Role to be updated
          required: true
          schema:
            $ref: "#/definitions/Role"
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/responses/Malformed'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          $ref: '#/responses/WrongContent'
        '415':
          $ref: '#/responses/WrongType'
    delete:
      summary: Archive the Role with the given ID.
      responses:
        '204':
          description: Role archived successfully
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: | 
            The role could not be archived due to a conflict. An example might
            be that the role is the users own role, and archiving the role might
            cause the user to be locked out.
  /users:
    get:
      produces:
        - application/json
      summary: Get a list of User objects
      description: |
        Get a list of `User` objects, eventually filtered by the query 
        parameters. When combining parameters, the conditions are joined by 
        AND. This means the resulting objects must satisfy all filters. All the string filter operations are case insensitive.
      parameters:
        - in: query
          name: email
          type: string
          format: email
          description: Filter by email.
        - in: query
          name: firstName
          type: string
          description: Filter by first name.
        - in: query
          name: lastName
          type: string
          description: Filter by last name.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      produces:
        - application/json
      consumes:
        - application/json
      summary: Add a new `User` to the list of users
      description: |
        Only the attributes that are marked as required should be filled in. The values of the other attributes are generated by the server. The server will ignore any data in the not required attributes. A successful response contains an updated `User` object with valid values for the server generated attributes.
      parameters:
        - in: body
          name: User
          description: User to add
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/responses/Malformed'
        '409':
          description: |
            The user already exists. This is not the same as `422`. This response
            indicates the request has a correct syntax and the content is correctly formed, 
            e.g. the email has the correct format, but a user with this e-mail already
            exists.
        '422':
          $ref: '#/responses/WrongContent'
        '415':
          $ref: '#/responses/WrongType'

  /users/{id}:
    parameters:
     -  name: id
        in: path
        description: ID of User 
        required: true
        type: integer
        format: int64
    get:
      produces:
        - application/json
      summary: Find User by ID
      responses:
        '200':
          description: OK
          schema: 
            $ref: '#/definitions/Role'
        '404':
          $ref: '#/responses/NotFound'
    put:
      produces:
        - application/json
      consumes:
        - application/json
      description: Update the ´User` with the given ID
      parameters:
        - in: body
          name: User
          description: User to add
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
            description: OK
        '400':
          $ref: '#/responses/Malformed'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: |
            There was a conflict saving the data. This is not the same as `422`. This response
            indicates the request has a correct syntax and the content is correctly formed,
            but it could not be saved, e.g. if another user already has this email.
        '422':
          $ref: '#/responses/WrongContent'
        '415':
          $ref: '#/responses/WrongType'
    delete:
      description: Archive the User with the given ID.
      responses:
        '204':
          description: Role archived successfully
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: | 
            The user could not be archived due to a conflict.
          
responses:
  Malformed:
    description: The JSON is malformed. This is a syntax error.
  WrongContent:
    description: | 
      The JSON is has correct syntax, but an attribute was missing or one of the
      attributes has incorrect content. All attributes with errors or missing ones
      should be reported back in the error object.
    schema:
      $ref: '#/definitions/Error'
  WrongType:
    description: |
      The `Content-Type` header is not set to `application/json`.
  NotFound:
    description: |
      The resource with the given ID was not found.
      
definitions:
  Company:
    type: object
    required: [name, vatNumber, phoneNumber, address]
    properties:
      id:
        type: integer
      name:
        type: string
      vatNumber:
        type: string
        example: "BE123456789B01"
      phoneNumber:
        type: string
        format: phone
        example: "+32 56 33 66 00"
      address:
        $ref: '#/definitions/Address'
      createdAt:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      lastUpdated:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      lastUpdatedBy:
        type: integer
      url:
        type: string
  Address:
    type: object
    required: [country, city, street, houseNumber, postalCode]
    properties:
      country:
        type: string
        example: "België"
      city:
        type: string
        example: "Gent"
      street:
        type: string
        example: "Jozef Plateaustraat"
      houseNumber:
        type: string
        example: "52B"
      postalCode:
        type: string
        example: "9000"
  Vehicle:
    type: object
    required: [licensePlate, chassisNumber, brand, model, type, mileage, year, leasingCompany]
    properties:
      id:
        type: integer
        example: 25
      licensePlate:
        type: string
        example: 1-ABC-456
      chassisNumber:
        type: string
        example: LJCPCBLCX11000237
      brand:
        type: string
        example: Volkswagen
      model:
        type: string
        example: Golf 7
      type:
        type: string
        example: Persoonswagen
      mileage:
        type: integer
        example: 132000
      year:
        type: string
        format: date
        example: 2012
      leasingCompany:
        type: integer
      company:
        type: integer
      createdAt:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      lastUpdatedBy:
        type: integer
      url:
        type: string
        format: url
        example: https://www.domain.me/vehicles/1
  Role:
    type: object
    required: [company, function, user, startDate, endDate]
    properties:
      id:
        type: integer
      company:
        type: integer
      function:
        type: string
      user:
        type: integer
      startDate:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      endDate:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      createdAt:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      lastUpdatedBy:
        type: integer
      url:
        type: string
  User:
    type: object
    required: [firstName, lastName, email, password]
    properties:
      id:
        type: integer
        example: 12345
      firstName:
        type: string
        example: "Jan"
      lastName:
        type: string
        example: "Janssens"
      email:
        type: string
        format: email
        example: "user@ugent.be"
      password:
        type: string
        format: password
        example: "******"
      createdAt:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updatedAt:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      lastUpdatedBy:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      url:
        type: string
        example: "/users/"
  Error:
    type: object
    properties:
      errors:
        type: array
        items:
          type: string
        description: |
          Contains a list of attributes that have an error. This can range from being required to
          having a conflict.
